# Telegraf Configuration

[global_tags]

# Configuration for telegraf agent
[agent]
   interval = "5s"

  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at
  ## most metric_batch_size metrics.
  metric_batch_size = 1000
  ## For failed writes, telegraf will cache metric_buffer_limit metrics for each
  ## output, and will flush this buffer on a successful write. Oldest metrics
  ## are dropped first when this buffer fills.
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. You shouldn't set this below
  ## interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "5s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## By default, precision will be set to the same timestamp order as the
  ## collection interval, with the maximum being 1s.
  ## Precision will NOT be used for service inputs, such as logparser and statsd.
  ## Valid values are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""
  ## Run telegraf in debug mode
  debug = false
  ## Run telegraf in quiet mode
  quiet = false
  ## Override default hostname, if empty use os.Hostname()
  hostname = "${TELEGRAF_HOST}"
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false


###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# Configuration for influxdb server to send metrics to
[[outputs.influxdb]]
  urls = ["http://${INFLUXDB_HOST}:${INFLUXDB_CONTAINER_PORT}"] # required
  database = "${INFLUXDB_DATABASE}" # required
  retention_policy = ""
  write_consistency = "any"

  timeout = "5s"

  username = "${INFLUXDB_ADMIN_USER}"
  password = "${INFLUXDB_ADMIN_PASSWORD}"

###############################################################################
#                            PROCESSOR PLUGINS                                #
###############################################################################

[[processors.starlark]]
  source = '''
def apply(metric):
    new_fields = {}
    for k, v in metric.fields.items():
        new_name = k.replace("-", "_").replace("/", "_")
        new_fields[new_name] = v
    metric.fields.clear()
    for k, v in new_fields.items():
        metric.fields[k] = v
    return [metric]
  '''
[[processors.converter]]
 [processors.converter.fields]
   float = ["*"]


###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################


###############################################################################
#                            SERVICE INPUT PLUGINS                            #
###############################################################################

[[inputs.gnmi]]
        addresses = ["${CISCO_2441_HOST}:${CISCO_2441_GNMI_PORT}"]
        username = "${CISCO_2441_USER}"
        password = "${CISCO_2441_PASSWORD}"
        encoding = "json"
        redial = "60s"

    [[inputs.gnmi.subscription]]
        name = "cisco_port_dwdm_port_float"
        origin = "Cisco-IOS-XR-controller-optics-oper"
        path = "/optics-oper/optics-ports/optics-port/optics-info"
        subscription_mode = "sample"
        sample_interval = "60s"

    [[inputs.gnmi.subscription]]
        name = "cisco_port_dwdm_controller_float"
        origin = "Cisco-IOS-XR-controller-otu-oper"
        path = "/otu/controllers/controller/info"
        subscription_mode = "sample"
        sample_interval = "60s"

    [[inputs.gnmi.subscription]]
        name = "cisco_port_ethernet_statistics_float"
        origin = "Cisco-IOS-XR-infra-statsd-oper"
        path = "/infra-statistics/interfaces/interface/generic-counters"
        subscription_mode = "sample"
        sample_interval = "60s"

[[inputs.gnmi]]
# GNMI subscriptions for Nokia SR-OS TiMOS-C-23.10.R4-1 routers.
        addresses = ["${NOKIA_2310_HOST}:${NOKIA_2310_GNMI_PORT}"]
        username = "${NOKIA_2310_USER}"
        password = "${NOKIA_2310_PASSWORD}"
        encoding = "json"
        redial = "10s"

# port c28

        [[inputs.gnmi.subscription]]
                name = "nokia_port_ethernet_statistics"
                path = "/state/port[port-id=1/1/c28/1]/ethernet/statistics"
                subscription_mode = "sample"
                sample_interval = "60s"

        [[inputs.gnmi.subscription]]
                name = "nokia_port_dwdm"
                path = "/state/port[port-id=1/1/c28]/dwdm"
                subscription_mode = "sample"
                sample_interval = "30s"

        [[inputs.gnmi.subscription]]
                name = "nokia_port_transceiver"
                path = "/state/port[port-id=1/1/c28]/transceiver"
                subscription_mode = "sample"
                sample_interval = "30s"

        [[inputs.gnmi.subscription]]
                name = "nokia_port_configure"
                path = "/configure/port[port-id=1/1/c28]/"
                subscription_mode = "sample"
                sample_interval = "60s"

        [[inputs.gnmi.subscription]]
                name = "nokia_port_ethernet"
                path = "/state/port[port-id=1/1/c28/1]/ethernet"
                subscription_mode = "sample"
                sample_interval = "60s"















